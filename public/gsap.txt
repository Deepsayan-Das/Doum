function Model() {
    const getScrollOffset = () => {
        if(window.innerHeight < 650)
            return window.innerHeight * 0.3;
        if(window.innerHeight < 700)
            return window.innerHeight * 0.05;
        if(window.innerHeight < 750) {
            const hVal = window.innerHeight;
            const offset = hVal * 0.01 * -1;
            return offset;
        }
        if(window.innerHeight < 850)
            return window.innerHeight * -0.05; // Medium-large screens
        if(window.innerHeight < 1000)
            return window.innerHeight * -0.15; // Large screens
        if(window.innerHeight < 1200)
            return window.innerHeight * -0.2; // Very large screens
        return 0;
    }

    const setInitialState = () => {
        ScrollTrigger.getAll().forEach(st => {
            st.scroll(window.scrollY);
            st.refresh();
        });
    }
    
    const modelRef = useRef();
    const model2Ref = useRef();
    const result = useLoader(GLTFLoader, '/IP 4.glb');
    const result2 = useLoader(GLTFLoader, '/IP 5.glb');
    
    // Initial state setup
    useEffect(() => {
        setInitialState();
        requestAnimationFrame(setInitialState);
        
        // IMPORTANT: Set initial visibility
        if (modelRef.current && model2Ref.current) {
            modelRef.current.visible = true;
            model2Ref.current.visible = false;
            
            // Set initial transform
            modelRef.current.scale.set(18, 18, 18);
            modelRef.current.rotation.set(-Math.PI/4, Math.PI, 0);
            modelRef.current.position.set(3, -50, -15);
            
            // Set initial transform for model2 (even though it's hidden)
            model2Ref.current.scale.set(18, 18, 18);
            model2Ref.current.rotation.set(-Math.PI/4, Math.PI, 0);
            model2Ref.current.position.set(3, -50, -15);
        }
    }, []);
    
    useGSAP(() => {
        if (!modelRef.current || !model2Ref.current) return;
     
        const heightOffset = getScrollOffset();

        ScrollTrigger.config({
            syncInterval: 0.1,
            autoRefreshEvents: "visibilitychange,DOMContentLoaded,load",
            limitCallbacks: true
        });
        
        // IMPORTANT: Ensure correct initial visibility
        modelRef.current.visible = true;
        model2Ref.current.visible = false;
        
        const tl = gsap.timeline({
            scrollTrigger:{
                trigger: "#model-section",
                start: 'top top',
                end: `+=${window.innerHeight * 3/2}`,
                scrub: {
                    ease: "power1.out",
                    smoothing: 0.5,
                    duration: 0.5
                },
                preventOverlaps: true,
                fastScrollEnd: true,
                immediateRender: false,
                invalidateOnRefresh: true,
                fastScrollEnd: true,
            }
        });
        
        const tl2 = gsap.timeline({
            scrollTrigger:{
                trigger: "#model-section",
                start: 'top 30%',
                end: 'bottom 60%',
                scrub: {
                    ease: "power1.out",
                    smoothing: 0.5,
                    duration: 0.5
                },
                preventOverlaps: true,
                fastScrollEnd: true,
                immediateRender: false,
                invalidateOnRefresh: true,
                fastScrollEnd: true,
            }
        });
        
        const tlR = gsap.timeline({
            scrollTrigger:{
                trigger: "#model-section",
                start: `top+=${window.innerHeight * 2.0}`,
                end: `top+=${(window.innerHeight * 3.0) + heightOffset}`,
                scrub: {
                    ease: "power1.out",
                    smoothing: 0.5,
                    duration: 0.5
                },
                preventOverlaps: true,
                fastScrollEnd: true,
                immediateRender: false,
                invalidateOnRefresh: true,
                fastScrollEnd: true,
            }
        });
        
        // IMPORTANT: This is the timeline that should handle the model switch
        const tlR2 = gsap.timeline({
            scrollTrigger:{
                trigger: "#model-section",
                start: `top+=${window.innerHeight * 4.0}`,
                end: `top+=${(window.innerHeight * 5.0) + heightOffset}`,
                scrub: {
                    ease: "power1.out",
                    smoothing: 0.5,
                    duration: 0.5
                },
                preventOverlaps: true,
                fastScrollEnd: true,
                immediateRender: false,
                invalidateOnRefresh: true,
                fastScrollEnd: true,
                
                // Model switching logic
                onEnter: () => {
                    // When entering this section, switch to model2
                    if (modelRef.current) modelRef.current.visible = false;
                    if (model2Ref.current) model2Ref.current.visible = true;
                },
                onLeaveBack: () => {
                    // When scrolling back up before this section, switch to model1
                    if (modelRef.current) modelRef.current.visible = true;
                    if (model2Ref.current) model2Ref.current.visible = false;
                }
            }
        });
        
        const tlR3 = gsap.timeline({
            scrollTrigger:{
                trigger: "#model-section",
                start: `top+=${window.innerHeight * 5.0}`,
                end: `top+=${window.innerHeight * 6.0}`,
                scrub: {
                    ease: "power1.out",
                    smoothing: 0.5,
                    duration: 0.5
                },
                preventOverlaps: true,
                fastScrollEnd: true,
                immediateRender: false,
                invalidateOnRefresh: true,
                fastScrollEnd: true,
            }
        });
        
        const tlR4 = gsap.timeline({
            scrollTrigger:{
                trigger: "#model-section",
                start: `top+=${window.innerHeight * 6.0}`,
                end: `top+=${window.innerHeight * 7.0}`,
                scrub: {
                    ease: "power1.out",
                    smoothing: 0.5,
                    duration: 0.5
                },
                preventOverlaps: true,
                fastScrollEnd: true,
                immediateRender: false,
                invalidateOnRefresh: true,
                fastScrollEnd: true,
            }
        });
        
        const tlR5 = gsap.timeline({
            scrollTrigger:{
                trigger: "#model-section",
                start: `top+=${window.innerHeight * 7.0}`,
                end: `top+=${window.innerHeight * 8.0}`,
                scrub: {
                    ease: "power1.out",
                    smoothing: 0.5,
                    duration: 0.5
                },
                preventOverlaps: true,
                fastScrollEnd: true,
                immediateRender: false,
                invalidateOnRefresh: true,
                fastScrollEnd: true,
            }
        });
        
        const tl3 = gsap.timeline({
            scrollTrigger:{
                trigger: "#model-section",
                start: `top+=${window.innerHeight * 8.0}`,
                end: `top+=${window.innerHeight * 9.4}`,
                scrub: {
                    ease: "power1.out",
                    smoothing: 0.5,
                    duration: 0.5
                },
                toggleActions: "play none none reverse",
                preventOverlaps: true,
                fastScrollEnd: true,
                immediateRender: false,
                invalidateOnRefresh: true,
                fastScrollEnd: true,
            }
        });
        
        const tl4 = gsap.timeline({
            scrollTrigger:{
                trigger: "#model-section",
                start: `top+=${window.innerHeight * 9.0}`,
                end: `top+=${window.innerHeight * 9.0}`,
                scrub: {
                    ease: "power1.out",
                    smoothing: 0.5,
                    duration: 0.5
                },
                preventOverlaps: true,
                fastScrollEnd: true,
                immediateRender: false,
                invalidateOnRefresh: true,
                fastScrollEnd: true,
            }
        });
        
        const fadeOut = gsap.timeline({
            scrollTrigger:{
                trigger: "#model-section",
                start: `top+=${window.innerHeight * 9.0}`,
                end: `top+=${window.innerHeight * 9.4}`,
                scrub: {
                    ease: "power1.out",
                    smoothing: 0.5,
                    duration: 0.5
                },
                preventOverlaps: true,
                fastScrollEnd: true,
                immediateRender: false,
                invalidateOnRefresh: true,
                fastScrollEnd: true,
                onUpdate: (self) => {
                    const progress = self.progress;
                    [modelRef, model2Ref].forEach(ref => {
                        if (ref.current && ref.current.visible) {
                            ref.current.traverse((node) => {
                                if (node.material) {
                                    node.material.transparent = true;
                                    node.material.opacity = 1 - progress;
                                    node.material.needsUpdate = true;
                                }
                            });
                        }
                    });

                    // If progress is complete, hide the models
                    if (progress === 1) {
                        if (modelRef.current) modelRef.current.visible = false;
                        if (model2Ref.current) model2Ref.current.visible = false;
                    }
                },
                onLeave: () => {
                    if (modelRef.current) modelRef.current.visible = false;
                    if (model2Ref.current) model2Ref.current.visible = false;
                },
                onEnterBack: () => {
                    // Only make model2 visible when entering back
                    if (model2Ref.current) model2Ref.current.visible = true;
                }
            }
        });
        
        // Scale animations
        tl.fromTo([modelRef.current.scale, model2Ref.current.scale], {
            x: 18, y: 18, z: 18
        }, {
            x: 10, y: 10, z: 10,
            immediateRender: false
        }, 'hi')
        .fromTo([modelRef.current.rotation, model2Ref.current.rotation], {
            x: -Math.PI/4, y: Math.PI, z: 0
        }, {
            x: 0, y: Math.PI, z: 0,
            immediateRender: false
        }, '-=1');

        // Position animations
        tl2.fromTo([modelRef.current.position, model2Ref.current.position], {
            x: 0, y: -50, z: -15
        }, {
            x: 3, y: 6, z: -25,
            immediateRender: false
        });

        // Rotation and scale animations
        tlR.fromTo([modelRef.current.rotation, model2Ref.current.rotation], {
            x: 0, y: Math.PI, z: 0
        }, {
            x: 0, y: 2*Math.PI/3, z: 0
        }, 'kbc')
        .fromTo([modelRef.current.scale, model2Ref.current.scale], {
            x: 9, y: 9, z: 9
        }, {
            x: 6.5, y: 6.5, z: 6.5
        }, 'kbc');
        
        tlR2.fromTo([modelRef.current.rotation, model2Ref.current.rotation], {
            x: 0, y: 2*Math.PI/3, z: 0
        }, {
            x: 0, y: Math.PI/2, z: 0
        });

        tlR3.fromTo([modelRef.current.rotation, model2Ref.current.rotation], {
            x: 0, y: Math.PI/2, z: 0
        }, {
            x: 0, y: Math.PI/4, z: 0
        });

        tlR4.fromTo([modelRef.current.rotation, model2Ref.current.rotation], {
            x: 0, y: Math.PI/4, z: 0
        }, {
            x: 0, y: 0, z: 0
        });

        tlR5.fromTo([modelRef.current.rotation, model2Ref.current.rotation], {
            x: 0, y: 0, z: 0
        }, {
            x: 0, y: -Math.PI, z: 0
        });
        
        // Final animations
        tl3.fromTo(model2Ref.current.scale, {
            x: 6.5, y: 6.5, z: 6.5
        }, {
            x: 35, y: 35, z: 35,
            immediateRender: false
        }, 0)
        .fromTo(model2Ref.current.position, {
            x: 3, y: 6, z: -25
        }, {
            x: 0, y: 6, z: -25,
            immediateRender: false
        }, 0);

        // Add reverse callback
        tl3.eventCallback("onReverseComplete", () => {
            if(model2Ref.current) {
                model2Ref.current.scale.set(6.5, 6.5, 6.5);
            }
        });
        
        fadeOut.fromTo(model2Ref.current, {
            opacity: 1
        }, {
            opacity: 0
        });

    }, [model2Ref.current]);

    return (
        <>
            <primitive 
                object={result.scene} 
                scale={[18, 18, 18]} 
                position={[3, -50, -15]}
                rotation={[-Math.PI/4, Math.PI, 0]}
                ref={modelRef}
            />
            <primitive 
                object={result2.scene} 
                scale={[18, 18, 18]} 
                position={[3, -50, -15]}
                rotation={[-Math.PI/4, Math.PI, 0]}
                ref={model2Ref}
            />
        </>
    );
}

model function with only the ocassional scaling bug